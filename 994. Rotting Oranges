class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        from collections import deque
        def in_range(i,j):
            return (0 <= i and i < len(grid)) and (0 <= j and j < len(grid[0]))
        def get_adjacent_fresh(i,j):
            res = []
            #above
            if in_range(i-1,j) and grid[i-1][j] == 1:
                res.append((i-1,j))

            if in_range(i+1,j) and grid[i+1][j] == 1:
                res.append((i+1,j))

            if in_range(i,j-1) and grid[i][j-1] == 1:
                res.append((i,j-1))

            if in_range(i,j+1) and grid[i][j+1] == 1:
                res.append((i,j+1))

            return res
        q = deque()
        fresh = 0
        time = 0
        #pre work to count fresh oranges and add original rotten to the q
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    fresh += 1

                if grid[i][j] == 2:
                    q.append((i,j))
        directions = [[]]
        while(q and fresh > 0):

            length = len(q)

            for k in range(length):
                i,j = q.popleft()

                adjacent = get_adjacent_fresh(i,j)
                for i,j in adjacent:
                    grid[i][j] = 2
                    q.append((i,j))
                    fresh -=1

            time += 1


        if fresh == 0:
            return time
        else:
            return -1

