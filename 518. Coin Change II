class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        import numpy as np

        m = np.zeros((len(coins),amount + 1))

        #set the table
        for i in range(len(coins)):
            m[i][0] = 1
        for i in range(len(coins)-1,-1,-1):
            for j in range(1,amount+1):
                if i + 1 in range(len(coins)):
                    m[i][j] += m[i+1][j]

                if j - coins[i] in range(amount + 1):
                    m[i][j] += m[i][j-coins[i]]

        return int(m[0][amount])

The idea:
the number of combos with set of coins {a,b,c} for amount d
is the same as using a with amount d - a plus using {b,c} for amount d
so bsaically do teh memoization/dp for that
