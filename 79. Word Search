https://leetcode.com/problems/word-search/submissions/1185478805/

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:


        def dfs(i,j,pos,visited):
            
            if not i in range(len(board)):
                return False

            if not j in range(len(board[i])):
                return False
            if board[i][j] != word[pos]:
                return False
            else:
                visited.add((i,j))
                if pos == len(word)-1:
                    return True

            #try above cell
            above = False
            if (i-1,j) not in visited:
                above = dfs(i-1,j,pos + 1,visited.copy())

            #try below cell
            below = False
            if (i + 1,j) not in visited:
                below = dfs(i+1,j,pos+1,visited.copy())

            #try right cell
            right = False
            if (i,j+1) not in visited:
                right = dfs(i,j+1,pos + 1,visited.copy())
            #try left cell
            left = False
            if (i,j-1) not in visited:
                left = dfs(i,j-1,pos + 1,visited.copy())

            return left or right or below or above

        for i in range(len(board)):
            for j in range(len(board[i])):
                if dfs(i,j,0,set()):
                    return True


        return False
            
            
