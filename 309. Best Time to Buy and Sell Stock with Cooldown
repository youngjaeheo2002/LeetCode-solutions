https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/submissions/1200903453/

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        m = [0]*len(prices)

        if len(prices) == 1:
            return 0

        if len(prices)==2:
            return max(0,prices[1]-prices[0])

        m[-2] = max(0,prices[-1]-prices[-2])

        for i in range(len(prices)-3,-1,-1):
            combinations = []

            for j in range(i+1,len(prices)):
                if j+2 < len(prices):
                    combinations.append(prices[j]-prices[i] + m[j+2])
                else:
                    combinations.append(prices[j]-prices[i])
                combinations.append(0 + m[j])
            m[i] = max(combinations)
        return m[0]
